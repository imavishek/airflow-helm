airflow:
  # Don't use this fernet key in production!
  fernet_key: "j0PNE8131Vx-ix7BsNDwskFUlnLa00mWU17BRujVcdY="
  service:
    type: NodePort
  image:
    repository: eu.gcr.io/taiyo-239217/airflow
    tag: fae4885
    pull_policy: IfNotPresent
  config:
  executor: KubernetesExecutor
  logs:
    persistence:
      ## accessMode: ReadWriteOnce
      ##
      ## Persistent Volume Storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      # storageClass: default
      ##
      ## Existing claim to use
      existingClaim: nfs-pvc
      existingClaimSubPath:
      ##
      ## Persistant storage size request
      size: 1Gi

  dags:
    persistence:
      enabled: false  # Persistence must be disabled when using git-sync
    git:
      # Play around with different repositories, branches and subpaths
      # subpath is the relative directory path in the git repository where
      # the dags can be found.
      url: https://github.com/imavishek/airflow
      username: imavishek
      password: '@abhipsha1996@'
      branch: master
      subpath: test-dags
  rbac:
    enabled: false
    # Initial rbac users can be defined here as a list of maps.
    users:
    - firstname: "Jon"
      lastname: "Doe"
      email: "jdoe@example.com"
      username: "jdoe"
      role: "Admin"
      password: "JDoe123"
    webserver_config: |
      # -*- coding: utf-8 -*-
      #
      # Licensed to the Apache Software Foundation (ASF) under one
      # or more contributor license agreements.  See the NOTICE file
      # distributed with this work for additional information
      # regarding copyright ownership.  The ASF licenses this file
      # to you under the Apache License, Version 2.0 (the
      # "License"); you may not use this file except in compliance
      # with the License.  You may obtain a copy of the License at
      #
      #   http://www.apache.org/licenses/LICENSE-2.0
      #
      # Unless required by applicable law or agreed to in writing,
      # software distributed under the License is distributed on an
      # "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
      # KIND, either express or implied.  See the License for the
      # specific language governing permissions and limitations
      # under the License.
      import os
      from airflow import configuration as conf
      from flask_appbuilder.security.manager import AUTH_DB
      # from flask_appbuilder.security.manager import AUTH_LDAP
      from flask_appbuilder.security.manager import AUTH_OAUTH
      # from flask_appbuilder.security.manager import AUTH_OID
      # from flask_appbuilder.security.manager import AUTH_REMOTE_USER
      basedir = os.path.abspath(os.path.dirname(__file__))
      # The SQLAlchemy connection string.
      SQLALCHEMY_DATABASE_URI = conf.get('core', 'SQL_ALCHEMY_CONN')
      # Flask-WTF flag for CSRF
      CSRF_ENABLED = True
      # ----------------------------------------------------
      # AUTHENTICATION CONFIG
      # ----------------------------------------------------
      # For details on how to set up each of the following authentication, see
      # http://flask-appbuilder.readthedocs.io/en/latest/security.html# authentication-methods
      # for details.
      # The authentication type
      # AUTH_OID : Is for OpenID
      # AUTH_DB : Is for database
      # AUTH_LDAP : Is for LDAP
      # AUTH_REMOTE_USER : Is for using REMOTE_USER from web server
      # AUTH_OAUTH : Is for OAuth
      AUTH_TYPE = AUTH_DB
      # Will allow user self registration
      AUTH_USER_REGISTRATION = True
      # The default user self registration role
      AUTH_USER_REGISTRATION_ROLE = "User"
      # When using OAuth Auth, uncomment to setup provider(s) info
      # Google OAuth example:
      # OAUTH_PROVIDERS = [{
      #   'name':'google',
      #   'whitelist': [],  # optional
      #   'token_key': 'access_token',
      #   'icon': 'fa-google',
      #   'remote_app': {
      #     'base_url': 'https://www.googleapis.com/oauth2/v2/',
      #     'request_token_params': {
      #       'scope': 'email profile'
      #     },
      #     'access_token_url': '',
      #     'authorize_url': '',
      #     'request_token_url': '',
      #     'consumer_key': '',
      #     'consumer_secret': '',
      #   }
      # }]


ingress:
  enabled: false

postgresql:
  enabled: true
  postgresUser: postgres
  postgresPassword: airflow
  postgresDatabase: airflow
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
