apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "airflow.fullname" . }}-web
  labels:
    app: {{ template "airflow.name" . }}-web
    chart: {{ template "airflow.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "airflow.name" . }}-web
      release: {{ .Release.Name }}
  strategy:
    # Smooth rolling update of the Web UI
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ template "airflow.name" . }}-web
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps.yaml") . | sha256sum }}
        configmap.fabric8.io/update-on-change: "{{ template "airflow.fullname" . }}-env"
      labels:
        app: {{ template "airflow.name" . }}-web
        release: {{ .Release.Name }}
    spec:
      securityContext:
        fsGroup: 1000
      restartPolicy: Always
      initContainers:
      - name: "init-airflow"
        image: {{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}
        imagePullPolicy: {{ .Values.airflow.image.pull_policy }}
        
        envFrom:
          - secretRef:
              name: {{ template "airflow.fullname" . }}-env
        command:
          - "bash"
        args:
          - "-cx"
          - "bash /usr/local/init-airflow.sh"
      {{- if .Values.airflow.dags.persistence.enabled }}
      - name: "init-dags"
        image: {{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}
        imagePullPolicy: {{ .Values.airflow.image.pull_policy }}
        
        envFrom:
          - secretRef:
              name: {{ template "airflow.fullname" . }}-env
        command:
          - "bash"
        args:
          - "-cx"
          - "bash /usr/local/init-dags.sh"
      {{- end }}
      containers:
      {{- if not .Values.airflow.dags.persistence.enabled }}
      - name: git-sync
        image: k8s.gcr.io/git-sync:v3.0.1
        imagePullPolicy: IfNotPresent
        
        env:
          - name: GIT_SYNC_REPO
            value: {{ .Values.airflow.dags.git.url }}
          - name: GIT_SYNC_BRANCH
            value: {{ .Values.airflow.dags.git.branch }}
          - name: GIT_SYNC_ROOT
            value: /git
          - name: GIT_SYNC_DEST
            value: repo
          - name: GIT_SYNC_WAIT
            value: "{{ .Values.airflow.dags.git.wait }}"
          - name: GIT_SYNC_USERNAME
            valueFrom:
              secretKeyRef:
                name: git
                key: GIT_SYNC_USERNAME
          - name: GIT_SYNC_PASSWORD
            valueFrom:
              secretKeyRef:
                name: git
                key: GIT_SYNC_PASSWORD
      {{- end }}
      - name: nginx
        image: nginx
        imagePullPolicy: IfNotPresent
        ports:
          - name: nginx
            containerPort: 80
        
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          httpGet:
            path: /health
            port: 80
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          httpGet:
            path: /health
            port: 80
      - name: webserver
        image: {{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}
        imagePullPolicy: {{ .Values.airflow.image.pull_policy }}
        ports:
        - name: webserver
          containerPort: 8080
        args: ["webserver"]
        envFrom:
          - secretRef:
              name: {{ template "airflow.fullname" . }}-env
        env:
        - name: AIRFLOW_KUBE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        # - name: FORWARDED_ALLOW_IPS
        #   value: "*"
        
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          httpGet:
            path: /health
            port: 8080
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
      